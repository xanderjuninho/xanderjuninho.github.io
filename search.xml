<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[移除office激活信息]]></title>
    <url>%2F2019%2F08%2F26%2F%E7%A7%BB%E9%99%A4office%E6%BF%80%E6%B4%BB%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[到office目录(存在ospp.vbs文件) C:\Program Files (x86)\Microsoft Office\Office16 C:\Program Files\Microsoft Office\Office16 管理员模式在该目录运行cmd cscript ospp.vbs /dstatus打印每个激活信息, 找”Last 5 characters of installed product key:XXXXX” script ospp.vbs /unpkey:XXXXX删除对应key]]></content>
      <tags>
        <tag>office</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[管理桌面右键新建栏]]></title>
    <url>%2F2019%2F08%2F26%2F%E7%AE%A1%E7%90%86%E6%A1%8C%E9%9D%A2%E5%8F%B3%E9%94%AE%E6%96%B0%E5%BB%BA%E6%A0%8F%2F</url>
    <content type="text"><![CDATA[查看新建栏中各项扩展名regedit注册表/HKEY_CURRENT_USER/Software/Microsoft/Windows/CurrentVersion/Explorer/Discardable/PostSetup/ShellNew/Classes项 删除新建栏中某项regedit注册表/HKEY_CLASSES_ROOT 中找某一扩展名, 删除/**中ShellNew文件夹]]></content>
      <tags>
        <tag>win</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[STS4创建springboot项目报错SunCertPathBuilderException]]></title>
    <url>%2F2019%2F08%2F17%2FSunCertPathBuilderException%2F</url>
    <content type="text"><![CDATA[[环境] JDK 12.0.2; Eclipse 2019-06 (4.12.0); STS4 4.3.2.RELEASE[未解决]一:添加Spring 证书到Java-security [1] 导出网页 (http://repo.spring.io)证书(.cer, X.509格式标准) spring.cer cmd导证书123456C:\Java\jdk-12.0.2\lib\security\cacerts&gt;&amp;emsp;keytool.exe -importcert -file &lt;新证书&gt; (spring.cer) -keystore C:\Java\jdk-12.0.2\lib\security\cacerts -storepass changeit&amp;emsp;Trust this certificate? [no]: yCertificate was added to keystore [未完全解决]二:拷贝原Maven/Repository(有ssm/springboot项目基础)文件到新Maven的空Repository文件夹不稳当,依旧会出现证书报错,Maven项目构建出错,STS联网新建springboot出错 [已解决]三:JDK版本降回1.8– Download Java SE 8 (8u211 and later)–&gt; Download Java SE 8 (8u202 and earlier) 12345Ref:https://blog.csdn.net/u014653815/article/details/80435226&amp;emsp;官方对奇/偶数版本区别的解释：JAVA将会在同一时间发布两个版本的JDK(JDK 7u71版本以后)：奇数版本为BUG修正并全部通过检验的版本(推荐);偶数版本包含奇数版本所有的内容，以及未被验证的BUG修复 –&gt; JDK 1.8.0_201 环境: JDK 1.8.0_201; Eclipse 2019-06 (4.12.0); STS4 4.3.2.RELEASE Ref:[1] https://dzone.com/articles/resolve-pkix-path-building-failed]]></content>
  </entry>
  <entry>
    <title><![CDATA[.]]></title>
    <url>%2F2019%2F08%2F16%2FM1565959260%2F</url>
    <content type="text"><![CDATA[(M1565959260)]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[DeprecationWarning: fs.SyncWriteStream is deprecated.]]></title>
    <url>%2F2019%2F08%2F14%2FDeprecationWarning-fs-SyncWriteStream-is-deprecated%2F</url>
    <content type="text"><![CDATA[[报错] (node:11604) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.[原因] node和hexo版本的问题：node8.x版本中，fs.SyncWriteStream被弃用了[方法]123456npm install hexo-fs --savenpm install hexo-deployer-git@0.3.1 --savenpm install hexo-renderer-ejs@0.3.1 --savenpm install hexo-server@0.2.2 --savenpm audit fix // 自动修复后hexo-deployer-git升级至1.0.0 12// Debug报错模块hexo clean --debug [已放弃/未解决]hexo-admin组件deploy功能配置引起: 3]]></content>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-admin组件deploy功能配置问题]]></title>
    <url>%2F2019%2F08%2F13%2Fhexo-admin%E7%BB%84%E4%BB%B6deploy%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[[报错] Error: Config value “admin.deployCommand” not found 123[解决] /hexo/_config.ymladmin: deployCommand: './hexo-deploy.sh' Error: spawn ENOENT [1] 123456[原因] windows下npm执行名不同[解决] /*.jsvar ps = require('child_process').spawn(process.platform === "win32" ? "npm.cmd" : "npm", ['install'], &#123; stdio: 'inherit', cwd: srcPath&#125;); hexo-admin在线部署功能各种报错 123[猜想]1.deploy.js库中命令适用于Linux,不适用于Windows2.spawn与exec区别 Bspawn和exec参数区别 [2]child_process.spawn(command,[args],[options])command String 将要运行的命令。args Array 字符串参数数组。options 配置对象： cwd String 子进程的当前工作目录 env Object 环境变量键值对 stdio Array|String 子进程的stdio配置 detached Boolean 这个子进程将会变成进程组的领导 uid Number 设置用户进程的ID gid Number 设置进程组的ID返回值: ChildProcess对象 利用给定的命令以及参数执行一个新的进程，如果没有参数数组，那么args将默认是一个空数组。 child_process.exec(command,[options],callback)command String 将要运行的命令,参数使用空格隔开options 配置对象： cwd String 子进程的当前工作目录。 env Object 环境变量键值对 encoding String 字符编码（默认：’utf8’） shell String 将要执行命令的Shell（默认: 在UNIX中为/bin/sh， 在Windows中为cmd.exe， Shell应当能识别 -c 开关在UNIX中，或 /s /c 在Windows中。 在Windows中，命令行解析应当能兼容cmd.exe）。 timeout Number 超时时间（默认： 0） maxBuffer Number 在stdout或stderr中允许存在的最大缓冲（二进制），如果超出那么子进程将会被杀死 （默认: 200*1024） killSignal String 结束信号（默认：’SIGTERM’） detached Boolean 这个子进程将会变成进程组的领导 uid Number 设置用户进程的ID gid Number 设置进程组的ID spawn和exec调用对象区别 [2]spawn接受的第一个参数为文件，而exec接受的第一个参数是命令。 12// Node源码中关于spawn的部分var spawn = exports.spawn = function(file, args, options) 123456789101112// exec部分 if (process.platform === 'win32') &#123; file = 'cmd.exe'; args = ['/s', '/c', '"' + command + '"']; // Make a shallow copy before patching so we don't clobber the user's // options object. options = util._extend(&#123;&#125;, options); options.windowsVerbatimArguments = true;&#125; else &#123; file = '/bin/sh'; args = ['-c', command];&#125; 所以在Windows下直接运行 require(‘child_process’).spawn(‘dir’) 会报异常说没有此文件，而使用exec则不会。若要使用spwan，应写成require(‘child_process’).spawn(‘cmd.exe’,[‘\s’, ‘\c’, ‘dir’])。 spawn和exec返回值区别 [2,3,4]child_process.spawn 返回一个有输出流和错误流的对象，可以监听它们从而获取数据，输出流有数据和结束事件。child_process.spawn 适合用在处理大量数据返回的场景中，图片处理，读二进制数据(文件读取)等等。child_process.spawn 是一个异步函数，在执行时就会返回数据，而不是等到数据都处理好了再一次返回。 child_process.exec 一次性返回输出执行结果内容，默认的buffer大小为200kb，如果exec返回的内容超过 200kb则会返回一个错误(Error maxBuffer execeded)，可以通过设置options buffer的size来扩大 buffer的大小。child_process.exec 是一个同步的异步方法，虽然方法体本身是异步的，但是它要等 child process 执行完成后，再把返回数据全返回给回调方法。exec方法相比spawn方法多提供了一个回调函数，可以获取子进程输出。这与为返回的ChildProcess对象的stdout或stderr监听data事件来获得输出的区别在于：data事件的方式会在子进程有数据时就触发，并把数据返回给Node。而回调函数，则会先将数据缓存在内存中（数据量小于maxBuffer参数），等待子进程运行完毕后再调用回调函数，并把最终数据交给回调函数。 spawn在windows运行问题 [5]Node.js的子进程child_process下的spawn函数可以用于调用系统上的命令，在 Linux, macOS 等系统上可以执行 123456// 调用 npm 命令const spawn = require('child_process').spawn;spawn('npm', &#123; stdio: 'inherit'&#125;); 12345678910// 同样的语句在 Windows 上执行会报错Error: spawn npm ENOENT at exports._errnoException (util.js:855:11) at Process.ChildProcess._handle.onexit (internal/child_process.js:178:32) at onErrorNT (internal/child_process.js:344:16) at nextTickCallbackWith2Args (node.js:455:9) at process._tickCallback (node.js:369:17) at Function.Module.runMain (module.js:432:11) at startup (node.js:141:18) at node.js:980:3 因为在 Windows 上执行 npm 时，实际执行的是npm.cmd批处理，而在 Windows 上，.cmd,.bat批处理无法脱离cmd.exe解释器而单独运行的。因此，需要显式地调用cmd。 123456789spawn('cmd', ['/c', 'npm'], &#123; stdio: 'inherit'&#125;);// 或者在调用spawn时，设置shell选项为true以隐式地调用cmd（Node.js v6+）spawn('npm', &#123; stdio: 'inherit', shell: true&#125;); 虽然在Linux, macOS等系统上不需要设置shell选项，命令也能正常执行；设置shell为true也不会妨碍命令的执行，只是会额外的产生一个不必要的shell进程影响性能。 因此，编写跨平台的spawn命令又不想增加额外的开销，可以: 12345678const process = require('process');const &#123; spawn &#125; = require('child_process');spawn('npm', &#123; stdio: 'inherit', // 仅在当前运行环境为 Windows 时，才使用 shell shell: process.platform === 'win32'&#125;); node.js执行shell命令 [6]12345678910// 引入子进程模块var process = require('child_process');// 调用该模块exec方法process.exec('shutdown -h now',function (error, stdout, stderr) &#123; // 回调函数非必须 if (error !== null) &#123; console.log('exec error: ' + error); &#125;&#125;); [已实现,未解决] 跟踪web请求,修改/hexo-admin/deploy.js库源码v 0.1 使用exec123456789101112131415161718192021222324252627282930// 执行: 在开启hexo服务的git-bash中执行// 效果: 执行速度慢,能在当前页面下方获得git-bash部署信息// 警告: DeprecationWarning: fs.SyncWriteStream is deprecated. //var spawn = require('child_process').spawnvar process = require('child_process')function once(fn) &#123; var called = false return function () &#123; if (!called) fn.apply(this, arguments) called = true &#125;&#125;module.exports = function (command, message, done) &#123; done = once(done); //var proc = spawn(command, [message], &#123;detached: true, stdio: 'inherit', shell: true&#125;); var proc = process.exec('sh '+command, [message]); var stdout = '' var stderr = ''; proc.stdout.on('data', function(data)&#123;stdout += data.toString()&#125;) proc.stderr.on('data', function(data)&#123;stderr += data.toString()&#125;) proc.on('error', function(err) &#123; done(err, &#123;stdout: stdout, stderr: stderr&#125;); &#125;); proc.on('close', function () &#123; done(null, &#123;stdout: stdout, stderr: stderr&#125;); &#125;);&#125; v 0.2 使用spawn12345678910111213141516171819202122232425262728293031323334// 执行: 新开cmd,hexo执行// 效果: 速度快(主客观),不在当前页面下方获得部署信息// 警告: DeprecationWarning: fs.SyncWriteStream is deprecated. var spawn = require('child_process').spawn//var process = require('child_process')function once(fn) &#123; var called = false return function () &#123; if (!called) fn.apply(this, arguments) called = true &#125;&#125;module.exports = function (command, message, done) &#123; done = once(done); var proc = spawn('sh '+command, [message], &#123;detached: true, stdio: 'inherit', shell: true&#125;); //var proc = process.exec('sh '+command, [message]); var stdout = ''; var stderr = ''; // 空指针报错(Error: Cannot read property 'on' of null),但不影响功能 //proc.stdout.on('data', function(data)&#123;stdout += data.toString()&#125;) //proc.stderr.on('data', function(data)&#123;stderr += data.toString()&#125;) proc.on('error', function(err) &#123; done(err, &#123;stdout: stdout, stderr: stderr&#125;); &#125;); proc.on('close', function () &#123; done(null, &#123;stdout: stdout, stderr: stderr&#125;); &#125;);&#125; [已放弃]1231.npm install --save hexo-admin deploy.js源码仍报警告2.exec和spawn当前情况都像是同步方法 T/Q: Node.js中spawn与exec Windows下spawn问题 js执行脚本文件(e.g. .sh) Ref:[1] nodejs在spawn中执行npm报错 [Error: spawn ENOENT]https://www.cnblogs.com/xiziyin/p/3578905.html[2] Node.js中spawn与exec的异同比较https://segmentfault.com/a/1190000002913884[3]. exec和spawn的区别https://www.cnblogs.com/xiaoniuzai/p/6889164.html[4]. Noxde.js: Difference between spawn and exec of child_processhttps://www.hacksparrow.com/nodejs/difference-between-spawn-and-exec-of-node-js-child-rocess.html[5] 利用Node.js编写跨平台的spawn语句详解https://www.zhangshengrong.com/p/On1voV7zay/[6] node.js执行shell命令https://www.cnblogs.com/hf8051/p/4794627.html]]></content>
      <tags>
        <tag>hexo-admin</tag>
        <tag>spawn&amp;exec</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo-admin及hexo添加图片]]></title>
    <url>%2F2019%2F08%2F13%2Fhexo-admin%E5%8F%8Ahexo%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[hexo-admin添加图片配置: 配置hexo/_config.yml : post_asset_folder: false改为true 安装插件:npm install hexo-asset-image --save(npm install https://github.com/CodeFalling/hexo-asset-image -- save) 直接截图 截图, Ctrl+V 去掉首尾多余 \ , 改 \ 为 / 12原: ![upload successful](\\images\pasted-5.png\)改: ![upload successful](/images/pasted-3.png) (右上刷新) [未解决] 放/_posts下.md同名目录中 运行hexo n &quot;Title&quot;,生成Title.md同时在/_posts下生成文件夹Title,用于放静态资源 在Title.md中引入图片时，先把图片复制到Title文件夹中，然后在title.md中按照markdown的格式引入图片：Ref:https://blog.csdn.net/weixin_40688217/article/details/90110975]]></content>
      <tags>
        <tag>hexo</tag>
        <tag>hexo-admin</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[npm依赖包与版本号]]></title>
    <url>%2F2019%2F08%2F13%2Fpm%E4%BE%9D%E8%B5%96%E5%8C%85%E4%B8%8E%E7%89%88%E6%9C%AC%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[npm查看本地包版本号和远程包的版本号npm查看本地包版本号12npm ls &lt;packageName&gt; // 本地包npm ls &lt;packageName&gt; -g // 全局安装包 npm语义化版本号npm使用 a.b.c:a为大版本号，有重大api改变，一般不向下兼容b为小版本号，新增功能，向下兼容c为补丁号，通常修复一些bug npm安装包版本号中特殊符号意义: 12~a.b.c : a和b不变,c为最新版本号^a.b.c : a不变,b和c为最新版本号 更新所有 npm 依赖包使用 npm-check 或 yarn 12npm i -g yarnnpm i -g npm-check 使用 npm-check 更新项目依赖12/hexo:npm-check -u 123456789输出:? Choose which packages to update. (Press &lt;space&gt; to select) Update package.json to match version installed.❯◯ chalk ^1.1.3 ❯ 2.4.2 https://github.com/chalk/chalk#readme ◯ cheerio ^0.22.0 ❯ 0.22.0 https://github.com/cheeriojs/cheerio#readme ◯ debug ^2.3.3 ❯ 4.1.1 https://github.com/visionmedia/debug#readmeSpace to select. Enter to start upgrading. Control-C to cancel.空格切换是否更新,Control + C 取消更新,回车执行更新. 使用 yarn 更新项目依赖12/hexo:yarn upgrade-interactive --latest 12345678910111213输出:yarn upgrade-interactive v1.15.2info Color legend : &quot;&amp;ltred&amp;gt&quot; : Major Update backward-incompatible updates &quot;&amp;ltyellow&amp;gt&quot; : Minor Update backward-compatible features &quot;&amp;ltgreen&amp;gt&quot; : Patch Update backward-compatible bug fixes? Choose which packages to update. (Press &lt;space&gt; to select, &amp;lta&amp;gt to toggle all,&amp;lti&amp;gt to invert selection) dependencies name range from to url❯◯ chalk latest 1.1.3 ❯ 2.4.2 https://github.com/chalk/chalk#readme ◯ cheerio latest 0.22.0 ❯ 1.0.0-rc.3 https://github.com/cheeriojs/cheerio#readmeA键全选切换功能,空格切换是否更新,Control + C 取消更新,回车执行更新。 npm-check 是检测 package.json 文件，项目存在 node_modules 文件夹即可更新。yarn根据 yarn.lock 文件判断版本是否是最新的，所以项目是使用npm安装依赖包，更新前要yarn install。]]></content>
      <tags>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Emoji]]></title>
    <url>%2F2019%2F08%2F13%2FEmoji%2F</url>
    <content type="text"><![CDATA[README.md(Hexo-filter-github-emojis)A Hexo plugin that adds emoji support, using Github Emojis API. Check out the Emoji Cheat Sheet for all the emojis it supports. V2 is not compatible with V1. V1 replaces codepoints with &lt;img&gt; tags. While V2 makes the font transparent and displays emojis with background-image. Installation1$ npm install hexo-filter-github-emojis --save OptionsYou can configure this plugin in _config.yml. Default options: 123456githubEmojis: enable: true className: github-emoji inject: true styles: customEmojis: className - Image class name. For example :sparkles: :sparkles: the filter will generate something like this: 1&lt;span class="github-emoji" style="background-image:url(https://assets-cdn.github.com/images/icons/emoji/unicode/2728.png?v8)" data-src="https://assets-cdn.github.com/images/icons/emoji/unicode/2728.png?v8"&gt;&amp;#x2728;&lt;/span&gt; inject - If true, the filter will inject proper inline styles and a script to fallback when image loading fails. If you can modify script files and style files, you may turn this off and add them yourself. 1&lt;span class="github-emoji" style="color:transparent;background:no-repeat url(...) center/contain" ...&gt; A script tag will be appended, the className changes according to the options: 12345678910111213141516171819&lt;script&gt; document.querySelectorAll('.github-emojis') .forEach(el =&gt; &#123; if (!el.dataset.src) &#123; return; &#125; const img = document.createElement('img'); img.style = 'display:none !important;'; img.src = el.dataset.src; img.addEventListener('error', () =&gt; &#123; img.remove(); el.style.color = 'inherit'; el.style.backgroundImage = 'none'; el.style.background = 'none'; &#125;); img.addEventListener('load', () =&gt; &#123; img.remove(); &#125;); document.body.appendChild(img); &#125;);&lt;/script&gt; styles - inline styles. For example: 1234githubEmojis: styles: font-size: 2em font-weight: bold outputs: 1&lt;span class="github-emoji" style="font-size:2em;font-weight:bold;background-image:url(...)" ...&gt; customEmojis - You can specify your own list. An object or JSON string is valid. The filter will first check the customEmojis then fallback to the Github Emojis list. For example: 1234githubEmojis: customEmojis: arrow_left: https://path/to/arrow_left.png arrow_right: https://path/to/arrow_right.png If you need to add code points that are not in the Github list, you can do this: 123456githubEmojis: customEmojis: man_juggling: src: https://path/to/man_juggling.png codepoints: ["1f939", "2642"] arrow_right: https://path/to/arrow_right.png TagIf you do not like the ::-style keywords, you can always use tags: 1&#123;% github_emoji sparkles %&#125; Add no-emoji: true to front-matter to stop replacing ::: 12345678---title: Hello Worldno-emoji: true---:tada: as it is.&#123;% github_emoji tada %&#125; still works. HelperYou can also render a GitHub emoji from a template using the github_emoji helper: 1&lt;h1&gt;&lt;% github_emoji('octocat') %&gt;&lt;/h1&gt; Website😊😉😂😍🥰😘😗😝🤪🤩🥺😭😤🥵🥶🤔😮😈👹🤡🤙https://www.emojicopy.com/ Ref[1]Sanarous(75%)[2]Hexo NexT 开启 emoji]]></content>
  </entry>
  <entry>
    <title><![CDATA[.]]></title>
    <url>%2F2019%2F08%2F11%2FM1565530800%2F</url>
    <content type="text"><![CDATA[Unexpectedly walking the night out of the feeling of intimacy. (M1565530800)]]></content>
      <categories>
        <category>Miscellaneous</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[Mysql8.0授权问题]]></title>
    <url>%2F2019%2F08%2F07%2FMysql8-0%E6%8E%88%E6%9D%83%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[Mysql8.0 需要先创建用户再授权 (不能在grant授权时隐式创建用户)报错: You are not allowed to create a user with GRANT 123mysql&gt; CREATE USER 'root'@'%' IDENTIFIED BY 'password';mysql&gt; grant all privileges on *.* to 'root'@'%';]]></content>
      <tags>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Tomcat命令(Linux)]]></title>
    <url>%2F2019%2F08%2F07%2FTomcat%E5%91%BD%E4%BB%A4(Linux)%2F</url>
    <content type="text"><![CDATA[/root目录:12./apache-tomcat-9.0.21/bin/startup.sh./apache-tomcat-9.0.21/bin/shutdown.sh 12./startup.sh./shutdown.sh 检查是否关闭:1ps -ef|grep java 杀死进程:1kill -9 7010]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[搭建个人网站-Ref]]></title>
    <url>%2F2019%2F08%2F07%2F%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99-Ref%2F</url>
    <content type="text"><![CDATA[你好 阿里云——手把手教你搭建个人网站https://blog.csdn.net/duruiqi_fx/article/details/54918393 一个小白如何搭建阿里云服务（centOS系统）并运行自己的项目https://blog.csdn.net/jike920203/article/details/80719911]]></content>
      <tags>
        <tag>搭建网站</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1-12名胡莱三国武将排名及技能搭配]]></title>
    <url>%2F2019%2F08%2F05%2F1-12%E5%90%8D%E8%83%A1%E8%8E%B1%E4%B8%89%E5%9B%BD%E6%AD%A6%E5%B0%86%E6%8E%92%E5%90%8D%E5%8F%8A%E6%8A%80%E8%83%BD%E6%90%AD%E9%85%8D%2F</url>
    <content type="text"><![CDATA[No.1 周瑜 统御之王天生技能，运筹帷幄Ⅲ 带兵上限多25%，兵多才是硬道理，单一兵越多兵的攻击和防御越高，技能搭配，运筹，特攻，特防，同仇，重弓，如打造攻城周瑜则破竹，如守则破釜沉舟！注：兵的攻击胜于防御！同级情况下周瑜第一！ No.2 张郃 单挑之王天生技能，无懈可击Ⅲ，降低伤害20%，注：具体伤害的算法是，对方攻击-自身防御*20%！卓越的攻击，单挑搭配技能，无懈，体魄，坚若，防专，专攻，注：武将的防御胜攻击，无懈加硬气或者保护盾则技能重叠！ No.3 张飞 下马之王天生技能，专攻弱点Ⅲ，对付除张郃之外的武将下马几率极高，搭配技能，专攻，骁勇，武专，浑天（或体魄），重弓（无懈）！注：专杀吕布，就怕张颌！ No.4 吕布 打兵之王天生技能，骁勇善战Ⅲ，攻击最高着，技能搭配，骁勇，武专，防专，重弓，最后一个加个运筹，浑天，专攻都行，不让我下马就等我报复你小弟吧！ No.5 夏侯惇 魏延 特种兵王子夏侯惇特种兵攻击Ⅲ，魏延特种兵防御Ⅲ，特种兵攻击/防御提高25%，他们的5个技能主要搭配是 特攻 特防 运筹 势如破竹 步步为营或一鼓作气 或同仇敌忾，不逊于周瑜。注：吴国有特种兵防御加成，所以魏延厉害，魏国有特种兵攻击加成，所以夏侯惇厉害。 No.6 黄忠 曹仁 弓兵王子黄忠弓兵攻击Ⅲ，曹仁弓兵防御Ⅲ，弓兵攻击/防御提高25%，弓兵拥有先手优势，他们都是防御卓越，5个技能主要搭配是弓攻 弓防 运筹 势如破竹 步步为营或一鼓作气 或同仇敌忾。 No.7 孙策 陆逊 攻城机器孙策攻击卓越，势如破竹Ⅲ（攻城麾下部队攻击力提高13%），陆逊防御卓越，步步为营Ⅲ（攻城时麾下部队防御力提高13%），他们的技能搭配多种多样，主要是统御技能，必须要运筹帷幄，提高带兵上限，玩什么兵种，看你自己选择，当然特种兵最好。 No.8 周泰 李典 步兵王子周泰步兵攻击Ⅲ，李典步兵防御Ⅲ，步兵攻击/防御提高25%，由于玩弓兵的人较多，步兵正好克制弓兵，他们的5个技能主要搭配是步攻 步防 运筹 势如破竹 步步为营或一鼓作气 或同仇敌忾。 No.9 程普 血牛体强健魄Ⅲ，血量增加20%，级越高血量越明显，属于混合型武将，一般不会被打下马，可以先补完其兵科加成+运筹帷幄+同仇敌忾+满弦+防御技能（硬气功、无懈可击、防具专精，防止被打成重伤）或专攻弱点（增加打兵数），这样他就由将变成了帅，虽然单挑极有可能会输，但最后的胜利却极有可能属于你。 No.10 太史慈 关羽 骑兵王子太史慈攻击卓越，骑兵防御Ⅲ，关羽攻击优秀，骑兵攻击Ⅲ，由于玩弓兵的人较多，骑兵被弓兵克，所以骑兵不是很好，他们的5个技能主要搭配是骑攻 骑防 运筹 势如破竹 步步为营或一鼓作气 或同仇敌忾。 No.11 许褚 赵云 守城王子许褚攻击卓越，破斧沉舟Ⅲ（守城时麾下部队攻击力提高13%），赵云资质平庸，壁垒森严Ⅲ（守城时麾下部队防御力提高13%），这两个将领只能用来守城，或者不怕死的话也可以用在战场上，打赢了，模式还是用全力出击，等着别人来攻击，很有机会让别人全军覆没，技能玩特种兵最好，运筹是必须的，其他的看自己怎么玩。 No.12 张辽 肉盾天升技能坚若磐石Ⅲ，（防御力增加10%），这个没有好将的时候可以练下，我觉得不怎么好，技能搭配以防御和血量为主，外加打兵技能。 其他英雄招到就可以丢了，马超可惜了 卓越的攻击，却是一个垃圾的天生技能，体力充沛Ⅲ，想练的也可以练下，颜良、文丑都是特种兵攻击/防御Ⅱ，不推荐练这两个。]]></content>
  </entry>
  <entry>
    <title><![CDATA[将进酒-李白]]></title>
    <url>%2F2019%2F08%2F05%2F%E5%B0%86%E8%BF%9B%E9%85%92(%E6%9D%8E%E7%99%BD)%2F</url>
    <content type="text"><![CDATA[君不见，黄河之水天上来，奔流到海不复回。君不见，高堂明镜悲白发，朝如青丝暮成雪。人生得意须尽欢，莫使金樽空对月。天生我材必有用，千金散尽还复来。烹羊宰牛且为乐，会须一饮三百杯。岑夫子，丹丘生，将进酒，杯莫停。与君歌一曲，请君为我倾耳听。钟鼓馔玉不足贵，但愿长醉不复醒。古来圣贤皆寂寞，惟有饮者留其名。陈王昔时宴平乐，斗酒十千恣欢谑。主人何为言少钱，径须沽取对君酌。五花马，千金裘，呼儿将出换美酒，与尔同销万古愁。]]></content>
      <categories>
        <category>Poem</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[离别-白居易]]></title>
    <url>%2F2019%2F08%2F05%2F%E7%A6%BB%E5%88%AB(%E7%99%BD%E5%B1%85%E6%98%93)%2F</url>
    <content type="text"><![CDATA[深秋时节话别离，冷风瑟瑟叶满溪。胸中无限慷与慨，转身欲语泪沾衣。青山不改水长流，明月依旧星渐稀。天长地久有尽时，此恨绵绵无绝期。]]></content>
      <categories>
        <category>Poem</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[胡莱三国全武将学习技能表]]></title>
    <url>%2F2019%2F08%2F05%2F%E8%83%A1%E8%8E%B1%E4%B8%89%E5%9B%BD%E5%85%A8%E6%AD%A6%E5%B0%86%E5%AD%A6%E4%B9%A0%E6%8A%80%E8%83%BD%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[曹操集团, 夏侯惇满攻为59点，满防35，满血为155点，天赋技能：特种兵攻击专精Ⅲ（麾下特种兵的攻击力提高25%)夏侯惇本身技能+特种兵防御+运筹帷幄+势如破竹+步步为营 (统帅+攻城)夏侯惇本身技能+特种兵防御+运筹帷幄+流星箭+满弦(重弓.流星箭) (统帅+打兵)夏侯惇本身技能+特种兵防御+斜刺+满弦(重弓.流星箭)+运筹帷幄 (专打周瑜技能)夏侯惇本身技能+特种兵防御+防护盾+斜刺+满弦(重弓.流星箭) (通用技能搭配)夏侯惇本身技能+特种兵防御+运筹帷幄+同仇敌忾+步步为营 张辽满攻为57，满防为36，满血为155，天赋技能：坚若磐石Ⅲ（防御力提高10%）张辽本身技能+无懈可击+防具专精+硬气功+防护盾 (单挑防御大将) 李典满攻53，满防42，满血155点，天赋技能：步兵防御专精Ⅲ（麾下步兵的防御力提高25%）李典是曹操手下早期的将领，从讨伐黄巾军开始就跟随曹操东征西讨，因为曹操部队早期势力不大时主要以步兵为主，而李典作为主要统帅长期指挥步兵作战，所以在游戏里自带步兵防御专精Ⅲ是比较合理的（另外，光荣旗下经典三国游戏-曹操传中的李典就是步兵的形象）。李典从军生涯打得最漂亮的一仗应该是公元208年镇守合肥时的逍遥津之战，此战李典与张辽、乐进合作以7000兵力抵御孙权10万大军，大获全胜。虽说张辽是此战的前军主将，但是李典同样功不可没，防御战打得非常出色，所以游戏中给李典A级防御成长无可厚非。可惜李典英年早逝，在逍遥津之战后第二年即去世，年仅36岁。如果李典能多活10年，其战功恐怕不在曹仁、张辽之下。李典本身技能+步兵攻击+运筹帷幄+势如破竹+步步为营 (统帅+攻城)李典本身技能+步兵攻击+运筹帷幄+破釜沉舟+壁垒森严 (统帅+驻防)李典本身技能+步兵攻击+运筹帷幄+同仇敌忾+满弦(重弓.流星箭)李典本身技能+步兵攻击+运筹帷幄+步步为营+满弦(重弓.流星箭) 张颌是胡莱三国绝对的单挑之王之王！是所有君主们必不可少的单挑武将！张颌初始满属性攻击为63，防御30，满血应为155张颌天赋技能：无懈可击Ⅲ（受到的伤害降低20%）张颌本身技能+斜刺(混天)+专供弱点+满弦(重弓.流星箭)+硬气功(保护盾)+武器专精 (5选4) 许褚满攻68，满防28，满血155，天赋技能：破釜沉舟Ⅲ（麾下部队在驻防时攻击力提高13%）胡莱三国防御型统御将，与赵云相同，但属性略强于赵云，卓越攻击！许褚本身技能+浑天斩+硬气功+专攻弱点(或武器专精)+重弓 （不推荐单挑路线，打不过张飞吕布张颌等武将）许褚本身技能+壁垒森严+运筹帷幄+某兵种攻击+重弓许褚本身技能+壁垒森严+某兵种攻击+某兵种防御+运筹帷幄 (统御技能搭配) 曹仁满攻51，防御42点，生命值155点。 天赋技能：弓兵防御专精Ⅲ(麾下弓箭兵的防御力提高25%）统御路线技能搭配推荐：曹仁本身技能+弓兵防御+运筹帷幄+步步为营+势如破竹 （进攻型统御，打黄巾军最强！）曹仁本身技能+弓兵防御+运筹帷幄+同仇敌忾+满弦(重弓.流星箭) （可攻可守，比较大众的技能搭配）单挑路线技能搭配推荐：天生技能+坚如磐石+硬气功+斜刺+防具加成 刘备集团, 黄忠满攻51，满防42，满血155。天赋技能：弓兵攻击专精Ⅲ（麾下弓箭兵的攻击力提高25%）黄忠是天生的统御将，但也可以作为单挑将，剑走偏锋吧！统御路线技能搭配推荐：黄忠本身技能+弓兵防御+运筹帷幄+步步为营+势如破竹 （进攻型统御黄忠，打黄巾军最强！）黄忠本身技能+弓兵防御+运筹帷幄+同仇敌忾+重弓 （可攻可守，比较大众的技能搭配）单挑路线技能搭配推荐：天生技能+坚如磐石+硬气功+斜刺+防具加成 关羽满攻60，满防33，满血为155。天赋技能：骑兵攻击专精Ⅲ（麾下骑兵的攻击力提高25%）关羽最佳技能搭配：关羽本身技能+骑兵防御专精+运筹帷幄+势如破竹+步步为营进攻型关羽只适合做进攻型武将，因为骑兵攻击很容易就被弓兵克了，所以不推荐其他路线的关羽！ 马超满攻64，满防30，满血155，天赋技能：体力充沛Ⅲ（体力恢复时间缩短40%）马超一直是胡莱三国比较争议的武将，原因没别的，就是天生技能太过鸡肋！马超技能搭配一直也是个问题，比较多元化，看选择什么路线了！马超本身技能+流星箭+满弦+重弓+武器专精 （机关枪路线）马超本身技能+触类旁通+天资聪颖+重弓+流星箭 （最偏门路线）这里说一下为什么推荐偏门路线，因为马超的天生技能注定了他不能作为主力将出现，就算上强力技能，也照样打不过其他主流名将，所以没必要花费时间心血在马超身上，不如将他练成守城将，专门用来对刷，上面说搭配的技能可以让马超快速升级，平时把他用来守城加税收是个不错的选择！对刷起来也很方便，不用吃体力药了！也可以作为坐台将，现在流行吕蒙流，因为有天资聪颖，坐台时间可以减少很多，平均24小时坐台下来起码可以创造额外的8点经验左右！ 赵云满攻为59，满防为34，满血为155，天赋技能：壁垒森严Ⅲ(麾下部队在驻防时防御力提高13%)赵云本身技能+浑天斩+硬气功+专攻弱点(或武器专精)+重弓 （单挑技能搭配）赵云本身技能+破釜沉舟+运筹帷幄+某兵种攻击+某兵种防御 （统御技能搭配） 张飞满攻为66，满防为27，满血为155，天赋技能：专攻弱点Ⅲ(造成的伤害提高20%)张飞是胡莱三国当之无愧的下马之王！浑天斩一出，下马几率高达60%，是所有君主们必不可少的单挑武将！张飞本身技能+骁勇善战+无懈可击+浑天斩(斜刺)+硬气功 (防御输出结合)张飞本身技能+骁勇善战+武器专精+浑天斩(斜刺)+硬气功(保护盾) (暴力+低防)张飞本身技能+骁勇善战+武器专精+斜刺+混天斩 (下马) 魏延满攻为54，满防为39，满血为155，天赋技能：特种兵防御专精Ⅲ（麾下特种兵的防御力提高25%）魏延本身技能+特种兵攻击+运筹帷幄+同仇敌忾+重弓 (标配流)魏延本身技能+特种兵攻击+运筹帷幄+重弓+流星箭(满弦) (双打流)魏延本身技能+特种兵攻击+运筹帷幄+势如破竹+满弦魏延本身技能+特种兵攻击+运筹帷幄+势如破竹+步步为营 孙权集团,孙策满攻63，满防30，满血155点，天赋技能：势如破竹Ⅲ（麾下部队在攻城时攻击力提高13%)绝对强力的进攻型统御将，攻城小霸王！孙策本身技能+步步为营+运筹帷幄+某兵种攻击+某兵种防御 （纯统御）孙策本身技能+运筹帷幄+某兵种攻击+某兵种防御+重弓 （统御+扫兵）孙策本身技能+步步为营+流星箭+运筹帷幄+重弓 (扫兵)第二种技能搭配为最佳，有一个机关枪技能可以完美的利用好孙策的卓越攻击！运筹帷幄是必不可少的，兵多是胡莱三国不变的硬道理！如果想再通用一点，可以将兵种攻防换成步步为营+流星箭！比较另类一点的打法！但绝对实用！ 陆逊满攻51，满防42，满血155点，天赋技能：步步为营Ⅲ(麾下部队在攻城时防御力提高13%)跟孙策差不多的类型，攻城小王子！卓越防御！陆逊本身技能+势如破竹+某兵种攻防+运筹帷幄作为主流将的陆逊，以上技能搭配为最佳了，不适合作为单挑将来练！统御路线最为合适！ 周瑜最高初始攻击属性为54，防御39，天生技能为运筹帷幄III(带兵上限提高25%)胡莱三国中的周瑜无疑是目前最强大 最主流的统御将 先天的优势注定了他地位周瑜本身技能+特种兵攻击+特种兵防御+同仇敌忾+势如破竹周瑜本身技能+特种兵攻击+特种兵防御+同仇敌忾+满弦(重弓.流星箭)周瑜本身技能+特种兵攻击+特种兵防御+势如破竹+步步为营周瑜本身技能+势如破竹+步步为营+破釜沉舟+壁垒森严技能搭配么 一个打兵的技能是少不了的 (最少一个)其他 兵种攻防(特种为主)同仇敌忾(高级了效果不稳定不一定会输)你需要他的目的可以加势如破竹(步步为营)破釜沉舟(壁垒森严)特别说明 ：打仗目前主要以特种为主 所以势如破竹 步步为营 破釜沉舟 壁垒森严 同仇敌忾为补充特种攻击防御的 特种攻防加成效果以2级为例加成效果是20%势如破竹 步步为营 破釜沉舟 壁垒森严 为10%且单方面有效(进攻 防御)同仇敌忾2为15% 且不一定会有效果 周泰满攻为60，满防为33，满血为155，天赋技能：步兵攻击专精Ⅲ(麾下步兵的攻击力提高25%)周泰本身技能+步兵防御+运筹帷幄+势如破竹+满弦(重弓.流星箭)周泰本身技能+步兵防御+运筹帷幄+势如破竹+步步为营周泰本身技能+步兵防御+运筹+重弓+流星箭 （目前主流） 程普满攻为58，满防为35，满血为155，天赋技能：体魄强健Ⅲ（生命值提高15%)程普本身技能+斜刺（浑天斩）+武器专精+重弓+硬气功（保护盾） （标配流）程普本身技能+斜刺（浑天斩）+重弓+硬气功（保护盾）+运筹帷幄 （综合流）程普本身技能+斜刺（浑天斩）+专供弱点+武器专精+保护盾（硬气功） （单挑流）程普本身技能+斜刺（浑天斩）+专供弱点+武器专精+骁勇善战 太史慈满攻为65，满防为28，满血为155，天赋技能：骑兵防御专精Ⅲ(麾下骑兵的防御力提高25%)太史慈本身技能+骑兵攻击+运筹帷幄+重弓+势如破竹 （进攻型，打兵与统御兼得。）太史慈本身技能+骑兵攻击+运筹帷幄+步步为营+势如破竹 （进攻型，纯统御。）太史慈本身技能+骑兵攻击+运筹帷幄+同仇敌忾+重弓 （可攻可守，比较推荐这种）太史慈本身技能+骑兵攻击+运筹帷幄+重弓+流星箭 （扫兵路线，可攻可守） 中立集团,初始满属性不祥，但生命值成长很高，天生技能：洗尽锋芒（可使对方将领当时最强的属性（攻击或防御）在本场战斗中降低8%）胡莱三国吕玲绮的生命值成长很高！配合天生技能，血牛路线绝对生猛！吕玲绮本身技能+体魄强健+无懈可击(或硬气功)+浑天斩+防具专精祝融夫人的出现，取代了吕布的打兵之王头衔！目前满攻满防数据不祥，但可以肯定的的是生命值为155点。祝融夫人本身技能+流星箭+运筹帷幄+武器专精+骁勇善战 (扫兵路线)祝融夫人本身技能+特种兵攻击+特种兵防御+运筹帷幄+流星箭 (统御路线)祝融的天生没有攻击没有满玄高！有满玄在估计机率都让满玄占了！ 貂蝉：吕布之妻，有沉鱼落雁之容，闭月羞花之貌。武将技：闭月斩——有30%的可能在攻击将领时使对方将领在本场战斗中无法使用任 何主动技能（例如：斜刺、浑天、重弓等主动技能，不包括硬气功、防护盾等被动触发技能）貂蝉本身技能+重弓+流星箭+运筹帷幄+硬气功 统御流 (硬气功为了保证她的天生能触发)貂蝉本身技能+斜刺+硬气功+专供弱点+武器专精 PK流 吕布满攻为68，满防为25，满血为155，天赋技能：骁勇善战Ⅲ(攻击力提高10%)现在的情况，吕布是被克制的越来越悲剧了，只能走极限输出路线了。吕布本身技能+斜刺(浑天斩)+硬气功(保护盾)+重弓+武器专精 (标准搭配)吕布本身技能+斜刺(浑天斩)+保护盾+武专+专供弱点 (单挑搭配)吕布本身技能+斜刺(浑天斩)+硬气功(保护盾)+打兵+运筹帷幄 (综合路线)吕布本身技能+斜刺(浑天斩硬气功)+双打兵+运筹帷幄 (双打兵流)吕布本身技能+武器专精+满弦+重弓+流星箭 (三打兵流)最喜欢的吕布双打搭配是上斜刺，稳定输出，强悍双打。现在不推荐特种吕布，特种张颌，因为现在的4个兵种属性基本平衡了，之间没有太大的差距，所以不推荐，当然也不是不行，只是没以前那么突出了。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F08%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <tags>
        <tag>HelloWorld</tag>
      </tags>
  </entry>
</search>
